#!/usr/bin/env bash

ensure_installed() {
    if ! command -v "$1" > /dev/null; then
        echo "Error: $1 not found"
        exit 1
    fi
}

# TODO: this is not always the case
FIRST_WIDTH="1366"
FIRST_HEIGHT="768"
FIRST_RES="${FIRST_WIDTH}x${FIRST_HEIGHT}"

SECOND_WIDTH="1920"
SECOND_HEIGHT="1080"
SECOND_RES="${SECOND_WIDTH}x${SECOND_HEIGHT}"

if [[ -n $WAYLAND_DISPLAY ]]; then
    ###########################################################################
    # WAYLAND
    ###########################################################################
    if [[ "$DESKTOP_SESSION" == "hyprland" ]]; then
        connectedOutputs=$(hyprctl monitors all | awk '$1 == "Monitor"{print $2}')

        setup_first() {
            # Args: name,resolution,position,scale
            hyprctl keyword monitor "$1",preferred,auto,auto > /dev/null
            hyprctl keyword monitor "$2",disable > /dev/null
            hyprctl dispatch workspace 1 > /dev/null
        }
        setup_second() {
            hyprctl keyword monitor "$1",disable > /dev/null
            # Force 1920x1080 since it doesn't always detect recommended resolution correctly
            # hyprctl keyword monitor "$2",preferred,auto,auto > /dev/null
            hyprctl keyword monitor "$2","$SECOND_RES",auto,auto > /dev/null
            # FIX: For some reason this gets ignored and we are on workspace 3
            hyprctl dispatch workspace 1 > /dev/null
        }
        setup_extend() {
            # first on the left of second
            hyprctl keyword monitor "$1,$FIRST_RES,0x0,auto" > /dev/null
            hyprctl keyword monitor "$2,$SECOND_RES,${FIRST_WIDTH}x0,auto" > /dev/null
            hyprctl dispatch workspace 1 > /dev/null
        }
        setup_duplicate() {
            # TODO: implement
            # hyprctl keyword monitor "$intern",preferred,auto,auto > /dev/null
            # hyprctl keyword monitor "$extern",preferred,auto,auto > /dev/null
            return
        }
    else
        echo "Error: $DESKTOP_SESSION not supported"
        exit 1
    fi
else
    ###########################################################################
    # XORG
    ###########################################################################
    ensure_installed xrandr

    # get info from xrandr
    connectedOutputs=$(xrandr | awk '$2 == "connected"{print $1}')
    # Get the number of enabled monitors:
    # number=$(xrandr --listmonitors | grep Monitors | awk '{print $NF}')

    # TODO: add --mode and --rate
    # xrandr --output DVI-D-0 --mode 2560x1440 --rate 59.95

    setup_first() {
        xrandr --output "$1" --auto --output "$2" --off
    }
    setup_second() {
        xrandr --output "$2" --mode "$SECOND_RES" --primary --output "$1" --off
    }
    setup_extend() {
        xrandr --output "$2" --mode "$SECOND_RES" --right-of "$1" --output "$1" --auto
    }
    setup_duplicate() {
        xrandr --output "$2" --same-as "$1" --auto
    }
fi

monitors=()
for display in $connectedOutputs; do
    monitors+=("$display")
done

if [[ ${monitors[0]} == *HDMI* ]]; then
    intern=${monitors[1]}
    extern=${monitors[0]}
else
    intern=${monitors[0]}
    extern=${monitors[1]}
fi

if [[ -z $extern ]]; then
    exit
fi

if [ "$1" = "--first" ]; then
    # Enable first monitor, turn off second one
    setup_first "$intern" "$extern"
elif [ "$1" = "--second" ]; then
    # Enable second monitor and make it primary, disable first monitor
    setup_second "$intern" "$extern"
    # TODO: XORG: when first and second monitor have different resolutions,
    # don't use auto, use their resolution instead; problem found in awesomewm
elif [ "$1" = "--extend" ]; then
    # Enable dual monitor setup, primary is the monitor, which was primary before
    setup_extend "$intern" "$extern"
    # TODO: XORG: when duplicating monitors with different resolutions,
    # using auto also doesn't work.
elif [ "$1" = "--duplicate" ]; then
    # Enable duplicate monitor setup
    setup_duplicate "$intern" "$extern"
elif [ "$1" = "--startup" ]; then
    # If there's a connected hmdi output, make --second
    setup_second "$intern" "$extern"
fi
