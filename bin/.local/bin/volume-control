#!/usr/bin/env bash

###############################################################################
# Volume Control
#
# Description: Update volume and get notifications about it
# Dependencies: notify-send, pactl
###############################################################################

check_if_command_exists() {
    if ! command -v "$1" > /dev/null; then
        echo "Error: $1 not found"
        exit 1
    fi
}

get_volume() {
    pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | awk -F '%' '{ print $1 }'
}

get_volume_muted_status() {
    pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}'
}

get_micro_muted_status() {
    pactl get-source-mute @DEFAULT_SOURCE@ | awk '{print $2}'
}

display_volume(){
    value=$(get_volume)
    status=$(get_volume_muted_status)
    [ "$status" = "no" ] && echo "󰕾 $value%" || echo "󰖁 $value%"
}

notify() {
    if command -v dunstify > /dev/null; then
        dunstify -a "volume-control" -r 7777 -u low -h int:value:"$1" -t 1500 "$2 Volume: ${1}%"
    else
        notify-send "$2 ${1}%" -t 350
    fi
}

notify_micro() {
    if command -v dunstify > /dev/null; then
        dunstify -a "volume-control" -r 7777 -u low -t 1500 "$1"
    else
        notify-send "$1" -t 350
    fi
}
send_notification() {
    if  [ "$2" = "increase" ]; then
        notify "$1" ""
    elif [ "$2" = "decrease" ]; then
        notify "$1" ""
    elif [ "$2" = "muted" ]; then
        notify "$1" "󰖁"
    elif [ "$2" = "unmuted" ]; then
        notify "$1" ""
    else
        notify-send  'Volume Control' 'Error: something went wrong' -t 3000 -u critical
    fi
}

main() {
    check_if_command_exists notify-send
    check_if_command_exists pactl
    VOLUME_UP="pactl set-sink-volume @DEFAULT_SINK@ +5%"
    VOLUME_DOWN="pactl set-sink-volume @DEFAULT_SINK@ -5%"
    VOLUME_UNMUTE="pactl set-sink-mute @DEFAULT_SINK@ 0"
    MUTE_TOGGLE="pactl set-sink-mute @DEFAULT_SINK@ toggle"
    MICRO_MUTE_TOGGLE="pactl set-source-mute @DEFAULT_SOURCE@ toggle"

    # Use alsa-utils instead of pactl if found
    # if command -v amixer > /dev/null; then
    #     VOLUME_UP="amixer -q sset Master 5%+ unmute"
    #     VOLUME_DOWN="amixer -q sset Master 5%- unmute"
    #     MUTE_TOGGLE="amixer -q sset Master toggle"
    # fi

    # Use pamixer instead of pactl if found
    # if command -v amixer > /dev/null; then
    #     VOLUME_UP="pamixer -i 5 --allow-boost"
    #     VOLUME_DOWN="pamixer -d 5 --allow-boost"
    #     VOLUME_UNMUTE="pamixer -u"
    #     MUTE_TOGGLE="pamixer -t"
    # fi

    # For the statusbar
    if [ "$1" = "--get-volume" ]; then
        display_volume
        exit 0
    fi

    mode="unknown"
    if [ "$1" = "--increase" ]; then
        $VOLUME_UNMUTE
        $VOLUME_UP
        mode="increase"
    elif [ "$1" = "--decrease" ]; then
        $VOLUME_UNMUTE
        $VOLUME_DOWN
        mode="decrease"
    elif [ "$1" = "--toggle-mute" ]; then
        $MUTE_TOGGLE
        status=$(get_volume_muted_status)
        if [ "$status" = "no" ]; then
            mode="unmuted"
        elif [ "$status" = "yes" ]; then
            mode="muted"
        fi
    elif [ "$1" = "--toggle-micro-mute" ]; then
        $MICRO_MUTE_TOGGLE
        status=$(get_micro_muted_status)
        if [ "$status" = "no" ]; then
            # unmuted
            notify_micro ""
        elif [ "$status" = "yes" ]; then
            # muted
            notify_micro ""
        fi
        return
    fi

    # removed in favor of direct use of display_volume
    # reason: difficult to handle the event of inserting/removing headphones
    #write new volume to a file so it can be read less resource intensive
    #output=$(display_volume)
    #echo "$output" > ~/.actual_volume

    send_notification "$(get_volume)" "$mode"
}

main "$@"
