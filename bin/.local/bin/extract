#!/usr/bin/env bash

###############################################################################
# Extract archive(s)
# Requirements: unzip, tar, bunzip2, gunzip, 7z, uncompress, zipinfo
###############################################################################

# shellcheck disable=SC2155,SC2164
# Disabled:
# "Declare and assign separately to avoid masking return values":
#  https://www.shellcheck.net/wiki/SC2155
# "Use 'pushd ... || exit' or 'pushd ... || exit' in case pushd fails":
#  https://www.shellcheck.net/wiki/SC2164

# -e: stop early if an error occurs
# -o pipefail: prevent silent failures in pipelines
set -eo pipefail

VERBOSE='true'
KEEP_ARCHIVES='false'
NO_NEW_DIR='false'
FORCE_OVERWRITE='false'
EXTRACT_TO=''

if command -v tput > /dev/null; then
    # tput is part of the ncurses package
    # Colors: https://www.ditig.com/publications/256-colors-cheat-sheet
    readonly OLIVE=$(tput setaf 3)
    readonly CYAN=$(tput setaf 6)
    readonly RED=$(tput setaf 9)
    readonly GREEN=$(tput setaf 2)
    readonly RESET=$(tput sgr0)
else
    readonly OLIVE="\033[0;33m"
    readonly CYAN="\033[0;36m"
    readonly RED="\033[0;31m"
    readonly GREEN="\033[0;32m"
    readonly RESET="\033[0m"
fi

info() {
    printf "${CYAN}%b${RESET}\n" "$1"
}

info_inline() {
    printf "${CYAN}%b${RESET}" "$1"
}

title() {
    printf "\n${OLIVE}%b${RESET}\n" "$1"
}

confirm() {
    printf "${GREEN}%b${RESET}\n" "$1"
}

alert() {
    printf "${RED}%b${RESET}\n" "$1"
}

raise() {
    alert "Error: $1" >&2
    exit 1
}

ensure_installed() {
    if ! command -v "$1" > /dev/null; then
        raise "$1 not found"
    fi
}

remove_archive() {
    if [[ "$KEEP_ARCHIVES" == "false" ]]; then
        [[ "$VERBOSE" == "false" ]] || info_inline "Removing archive '$1'... "
        rm -f "$1"
        [[ "$VERBOSE" == "false" ]] || confirm "Done"
    fi
}

extract_zip() {
    ensure_installed unzip

    local need_new_dir='false'
    local name=$(basename "$1")
    # NOTE: $NO_NEW_DIR and $EXTRACT_TO are mutually exclusive
    if [[ -n "$EXTRACT_TO" && "$NO_NEW_DIR" == "false" ]]; then
        # use custom directory name
        name="$EXTRACT_TO"
        need_new_dir='true'
    else
        # remove file extension
        name="${name%.*}"
    fi

    if [[ -z "$EXTRACT_TO" && "$NO_NEW_DIR" == "false" ]]; then
        # don't create a new directory if there's one directory containing
        # every other file in the archive
        local -a zip_items
        while IFS= read -r line; do
            zip_items+=("$line")
        done < <(zipinfo "$1" \* 2> /dev/null | awk '{print $NF}')

        # check if zipinfo failed or there were no files
        if [[ ${#zip_items[@]} -ne 0 ]]; then
            for element in "${zip_items[@]}"; do
                if [[ "$element" != "${zip_items[0]}"* ]]; then
                    # $element does not start with first item name
                    readonly need_new_dir='true'
                    break
                fi
            done
        fi
    fi

    if [[ "$need_new_dir" == "true" ]]; then
        [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1 into $name..."
        local unzip_flags=(-d "$name")
        if [[ "$FORCE_OVERWRITE" == "true" ]]; then
            unzip_flags+=(-o)
        fi
        unzip "${unzip_flags[@]}" "$1"
        [[ "$VERBOSE" == "false" ]] || confirm "Done"
    else
        [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1..."
        local unzip_flags=()
        if [[ "$FORCE_OVERWRITE" == "true" ]]; then
            unzip_flags+=(-o)
        fi
        unzip "${unzip_flags[@]}" "$1"
        [[ "$VERBOSE" == "false" ]] || confirm "Done"
    fi

    remove_archive "$1"
}

extract_with_7z() {
    ensure_installed 7z

    local need_new_dir='false'
    local name=$(basename "$1")
    # NOTE: $NO_NEW_DIR and $EXTRACT_TO are mutually exclusive
    if [[ -n "$EXTRACT_TO" && "$NO_NEW_DIR" == "false" ]]; then
        # use custom directory name
        name="$EXTRACT_TO"
        need_new_dir='true'
    else
        # remove file extension
        name="${name%.*}"
    fi

    if [[ "$need_new_dir" == "true" ]]; then
        [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1 into $name..."
        local sevenzip_flags=(-o"$name")
        if [[ "$FORCE_OVERWRITE" == "true" ]]; then
            sevenzip_flags+=(-aoa)
        fi
        7z x "$1" "${sevenzip_flags[@]}"
        [[ "$VERBOSE" == "false" ]] || confirm "Done"
    else
        [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1..."
        local sevenzip_flags=()
        if [[ "$FORCE_OVERWRITE" == "true" ]]; then
            sevenzip_flags+=(-aoa)
        fi
        7z x "$1" "${sevenzip_flags[@]}"
        [[ "$VERBOSE" == "false" ]] || confirm "Done"
    fi

    remove_archive "$1"
}

extract_with_tar() {
    # Is there even a linux system without tar?
    ensure_installed tar

    [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1..."

    local tar_flags=()

    [[ "$VERBOSE" == "false" ]] || tar_flags+=(--verbose)

    if [[ "$FORCE_OVERWRITE" == "true" ]]; then
        tar_flags+=(--overwrite)
    else
        tar_flags+=(--keep-old-files)
    fi

    case $1 in
        *.tar.bz2) tar_flags+=(--extract --bzip2) ;;
        *.tbz2) tar_flags+=(--extract --bzip2) ;;
        *.tar.gz) tar_flags+=(--extract --gzip) ;;
        *.tgz) tar_flags+=(--extract --gzip) ;;
        *.tar.xz) tar_flags+=(--extract --xz) ;;
        # TODO: add --lzip, --lzma, --lzop, --zstd
        *.tar) tar_flags+=(--extract) ;;
    esac

    tar "${tar_flags[@]}" --file "$1"

    [[ "$VERBOSE" == "false" ]] || confirm "Done"

    remove_archive "$1"
}

extract_with_bungunzip2() {
    local extractor
    case $1 in
        *.bz2) extractor='bunzip2' ;;
        *.gz) extractor='gunzip' ;;
    esac

    ensure_installed "$extractor"

    [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1..."

    local bunzip2_gunzip_flags=()

    [[ "$VERBOSE" == "false" ]] && bunzip2_gunzip_flags+=(--quiet) || bunzip2_gunzip_flags+=(--verbose)

    if [[ "$FORCE_OVERWRITE" == "true" ]]; then
        bunzip2_gunzip_flags+=(--force)
    else
        bunzip2_gunzip_flags+=(--keep)
    fi

    extractor "${bunzip2_gunzip_flags[@]}" -- "$1"

    remove_archive "$1"
}

extract_with_uncompress() {
    ensure_installed uncompress

    [[ "$VERBOSE" == "false" ]] || info "Extracting content from $1..."

    local uncompress_flags=()

    [[ "$VERBOSE" == "false" ]] || uncompress_flags+=(-v)

    if [[ "$FORCE_OVERWRITE" == "true" ]]; then
        uncompress_flags+=(-f)
    fi

    uncompress "${uncompress_flags[@]}" -- "$1"

    remove_archive "$1"
}

show_help() {
    echo "Usage: extract [OPTIONS] <ARCHIVES...>"
    echo "Extracts archive(s). In case of zip files, smartly detect if a new directory to extract the content to is needed."
    echo
    echo "Options:"
    echo "  -h, --help           Display this help message."
    echo "  -s, --silent         Disable verbose output."
    echo "  -f, --force          Force overwrite existing files."
    echo "  -k, --keep           Keep the archive(s) after extraction."
    echo "  -n, --no-dir         Don't check to create new directory. Good for large archives. (*)"
    echo "  -t, --to <name>      Extract to a specific directory. Only works with one archive. (*)"
    echo
    echo "Notes:"
    echo "  (*) - option works for zip, rar and 7z archives"
    exit 0
}

extract_archive() {
    if [[ ! -f $1 ]]; then
        raise "'$1' does not exist"
    fi

    case $1 in
        *.tar.bz2 | *.tbz2 | *.tar.gz | *.tgz | *.tar.xz | *.tar) extract_with_tar "$1" ;;
        *.zip) extract_zip "$1" ;;
        *.rar) extract_with_7z "$1" ;;
        *.7z) extract_with_7z "$1" ;;
        *.bz2 | *.gz) extract_with_bungunzip2 "$1" ;;
        *.Z) extract_with_uncompress "$1" ;;
        *) raise "'$1' cannot be extracted with this program" ;;
    esac
}

main() {
    ARCHIVES=()
    while true; do
        case $1 in
            -h | --help) show_help ;;
            -s | --silent)
                readonly VERBOSE='false'
                shift
                ;;
            -k | --keep)
                readonly KEEP_ARCHIVES='true'
                shift
                ;;
            -t | --to)
                if [[ -z "$2" ]]; then
                    raise "Option '$1' requires a name"
                fi
                readonly EXTRACT_TO="$2"
                shift 2
                ;;
            -n | --no-dir)
                readonly NO_NEW_DIR='true'
                shift
                ;;
            -f | --force)
                readonly FORCE_OVERWRITE='true'
                shift
                ;;
            -*)
                alert "Unknown option: '$1'"
                show_help
                ;;
            *)
                if [[ -z "$1" ]]; then
                    break
                fi
                ARCHIVES+=("$1")
                shift
                ;;
        esac
    done

    if ((${#ARCHIVES[@]} == 0)); then
        raise "Need an archive to extract"
    fi

    if [[ -n "$EXTRACT_TO" && "$NO_NEW_DIR" == "true" ]]; then
        raise "Flags -t|--to and -n|--no-dir are mutually exclusive"
    fi

    if [[ -n "$EXTRACT_TO" ]]; then
        if ((${#ARCHIVES[@]} != 1)); then
            raise "Multiple archives with destination directory are not supported"
        fi
    fi

    for i in "${ARCHIVES[@]}"; do
        extract_archive "$i"
    done
}

main "$@"
