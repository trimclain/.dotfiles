#!/usr/bin/env python3

# TODO: update for arch

import os
from pathlib import Path
from shutil import which
import subprocess
import sys

CWD = os.path.join(Path.home(), ".dotfiles")
BACKUP_FOLDER = os.path.join(CWD, ".backup")

STOW_FOLDERS = [
    "bin",  # 0
    "bash",  # 1
    "i3",  # 2
    "awesome",  # 3
    "polybar",  # 4
    "nvim",  # 5
    "chtsh",  # 6
    "tmux",  # 7
    "vim",  # 8
    "zsh",  # 9
    "kitty",  # 10
    "alacritty",  # 11
    "rofi",  # 12
    "picom",  # 13
    "lf",  # 14
    "stylua",  # 15
]

STOW_CONFIGS = [
    "",  # 0
    ".bashrc",  # 1
    ".config/i3",  # 1
    ".config/awesome",  # 2
    ".config/polybar",  # 3
    ".config/nvim",  # 4
    "",  # 5
    ".tmux.conf",  # 6
    ".vimrc",  # 7
    ".zshrc",  # 8
    ".config/kitty",  # 9
    ".config/alacritty",  # 10
    ".config/rofi",  # 11
    ".config/picom",  # 12
    ".config/lf",  # 13
    ".config/.stylua.toml",  # 14
]

# Get the mode, default to normal
if len(sys.argv) == 1:
    MODE = "--normal"
elif len(sys.argv) == 2:
    MODE = sys.argv[1]
else:
    print("Too many arguments! Try again.")
    sys.exit(1)


def is_tool(name):
    """Check whether `name` is in PATH and marked as executable."""
    return which(name) is not None


def exists(path: str) -> bool:
    """Check if a given path exists

    Args:
        path (str): path to a file or a folder

    Returns:
        True if the path exists
    """
    return os.path.isfile(path) or os.path.isdir(path)


def fullpath(location: str) -> str:
    """Add $HOME to the beginning of given path

    Args:
        location (str): path to file/folder

    Returns:
        Full path to file/folder
    """
    return os.path.join(Path.home(), location)


def backup(location: str) -> None:
    """Create a backup of an existing config

    Args:
        location (str): path to the config

    Returns:
        None
    """
    # filter empty strings
    if not location:
        return
    full_path = fullpath(location)
    if exists(full_path) and not os.path.islink(full_path):
        subprocess.run(["mkdir", "-p", BACKUP_FOLDER])
        print("Found existing", location, "-> Moving it to", BACKUP_FOLDER)
        subprocess.run(["mv", full_path, BACKUP_FOLDER])

    # Next part is useless if links are controlled by stowself.
    # If not, uncomment \_/ this.
    # elif exists(full_path) and os.path.islink(full_path):
    #     print("Found symlink at", full_path, "-> Deleting it")
    #     subprocess.run(["rm", "-r", full_path])


def get_config_names():  # -> list[str]: -- not supported in 3.7
    """Get the names of configs to install

    Returns:
        List of names
    """
    names = []
    to_stow = []
    # Full installation
    if MODE == "-f" or MODE == "--full":
        # indexex of folders to stow
        to_stow = [0, 1, 5, 6, 7, 8, 9]
    # Small installation
    elif MODE == "-s" or MODE == "--small":
        # indexex of folders to stow
        to_stow = [0, 1, 6, 7, 8]
    # Linux installation
    elif MODE == "-l" or MODE == "--linux":
        # indexex of folders to stow
        to_stow = [0, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15]
    # Remote server installation
    elif MODE == "--server":
        # indexex of folders to stow
        to_stow = [0, 1, 7, 8]
    # Normal mode
    elif MODE == "--normal":
        # indexex of folders to stow
        to_stow = [0, 5, 6, 7, 9]
    else:
        print("Error:", MODE, "argument doesn't exist")
        sys.exit(1)
    if to_stow:
        # check for existing files to backup
        for ind in to_stow:
            backup(STOW_CONFIGS[ind])
            names.append(STOW_FOLDERS[ind])
        return names


def install():
    # Check if stow is installed
    if not is_tool("stow"):
        print("Error: stow not found")
        sys.exit(1)

    # Check if in ~/.dotfiles
    if os.getcwd() != CWD:
        print("Error: not in", CWD)
        sys.exit(1)

    # Stow
    names = get_config_names()
    for name in names:
        subprocess.run(["stow", "-vR", name])
    # print("Done")


def unixpool_install():
    # Install tmux-sessionizer, bash, vim, tmux, i3
    subprocess.run(
        [
            "mkdir",
            "-p",
            fullpath(".local/bin"),
            fullpath(".config"),
            fullpath(".config/i3"),
            fullpath(".config/i3status"),
        ]
    )
    pairs = [
        (".dotfiles/bin/.local/bin/tmux-sessionizer", ".local/bin/tmux-sessionizer"),
        (
            ".dotfiles/bin/.local/bin/set-random-wallpaper",
            ".local/bin/set-random-wallpaper",
        ),
        (".dotfiles/bash/.bashrc", ".bashrc"),
        (".dotfiles/bash/.bash_profile", ".bash_profile"),
        (".dotfiles/vim/.vimrc", ".vimrc"),
        (".dotfiles/tmux/.tmux.conf", ".tmux.conf"),
        (".dotfiles/i3/.config/i3/config.alt", ".config/i3/config"),
        (".dotfiles/i3/.config/i3status/config.alt", ".config/i3status/config"),
    ]

    for pair in pairs:
        backup(pair[1])
        subprocess.run(
            [
                "ln",
                "-s",
                fullpath(pair[0]),
                fullpath(pair[1]),
            ]
        )
        print("Adding symlink to", pair[1])
    # print("Done")


if __name__ == "__main__":
    if MODE == "--unixpool":
        unixpool_install()
    else:
        install()
