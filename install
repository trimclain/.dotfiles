#!/usr/bin/env python3

import os
import shutil
import subprocess
import sys
from pathlib import Path

CWD = os.path.join(Path.home(), ".dotfiles")
BACKUP_FOLDER = os.path.join(CWD, ".backup")

CONFIGS = {
    # dev
    "bin": "",
    "chtsh": "",
    "stylua": ".config/.stylua.toml",

    # shell
    "bash": ".bashrc",
    "zsh": ".zshrc",
    "tmux": ".tmux.conf",

    # wm
    "i3": ".config/i3",
    "awesome": ".config/awesome",
    "qtile": ".config/qtile",
    "hyprland": ".config/hypr",

    # bar
    "polybar": ".config/polybar",
    "waybar": ".config/waybar",

    # editor
    "nvim": ".config/nvim",
    "vim": ".vimrc",

    # terminal
    "kitty": ".config/kitty",
    "alacritty": ".config/alacritty",
    "wezterm": ".config/wezterm",
    "ghostty": ".config/ghostty",

    # wm utils
    "xorg": ".xprofile",
    "rofi": ".config/rofi",
    "picom": ".config/picom",
    "dunst": ".config/dunst",

    # apps
    "apps": [
        ".config/mimeapps.list",
        ".config/user-dirs.dirs",
        ".config/user-dirs.locale",
    ],
    "lf": ".config/lf",
    "ncspot": ".config/ncspot",
    "pomo": ".config/pomo",
    "fastfetch": ".config/fastfetch",
}

# Get the mode, default to normal
if len(sys.argv) == 1:
    MODE = "--normal"
elif len(sys.argv) == 2:
    MODE = sys.argv[1]
else:
    print("Too many arguments! Try again.")
    sys.exit(1)


def exists(path: str) -> bool:
    """Check if a given path exists

    Args:
        path (str): path to a file or a folder

    Returns:
        True if the path exists
    """
    return os.path.isfile(path) or os.path.isdir(path)


def fullpath(location: str) -> str:
    """Add $HOME to the beginning of given path

    Args:
        location (str): path to file/folder

    Returns:
        Full path to file/folder
    """
    return os.path.join(Path.home(), location)


def backup(location: str) -> None:
    """Create a backup of an existing config

    Args:
        location (str): path to the config

    Returns:
        None
    """
    # filter empty strings
    if not location:
        return

    full_path = fullpath(location)
    if exists(full_path) and not os.path.islink(full_path):
        if not os.path.isdir(BACKUP_FOLDER):
            os.mkdir(BACKUP_FOLDER)

        basename = os.path.basename(location)
        name, ext = basename, ""
        if os.path.isfile(full_path) and "." in basename:
            name, ext = basename.split(".")

        # if a backup already exist, add backup2
        count = len([el for el in os.listdir(BACKUP_FOLDER) if name in el])
        if count > 0:
            # turn settings.json into settings1.json and not settings.json1
            if ext:
                new_name = f"{name}{count + 1}.{ext}"
            else:
                new_name = f"{name}{count + 1}"
        else:
            new_name = basename

        backup_path = os.path.join(BACKUP_FOLDER, new_name)
        print("Found existing", location, "-> Moving it to", backup_path)
        shutil.move(full_path, backup_path)


def get_config_names():  # -> list[str]: -- not supported in 3.7 (on debian)
    """Get the names of configs to install

    Returns:
        List of names
    """
    # Small installation
    if MODE == "-s" or MODE == "--small":
        return ["bin", "bash", "chtsh", "tmux", "vim"]
    # Normal mode (good for wsl)
    if MODE == "--normal":
        return ["bin", "nvim", "chtsh", "tmux", "zsh"]
    # Full installation (combine small and normal)
    if MODE == "-f" or MODE == "--full":
        return ["bin", "bash", "nvim", "chtsh", "tmux", "vim", "zsh"]
    # Linux installation
    if MODE == "-l" or MODE == "--linux":
        return [
            "bin",
            "nvim",
            "chtsh",
            "tmux",
            "zsh",
            "kitty",
            "rofi",
            "picom",
            "lf",
            "stylua",
            "xorg",
            "wezterm",
            "apps",
            "dunst",
            "qtile",
            "hyprland",
            "waybar",
        ]
    # Remote server installation
    if MODE == "--server":
        return ["bin", "bash", "tmux", "vim"]

    print("Error:", MODE, "argument doesn't exist")
    sys.exit(1)


def install():
    # Check if stow is installed
    if not shutil.which("stow"):
        print("Error: stow not found")
        sys.exit(1)

    # Check if in ~/.dotfiles
    if os.getcwd() != CWD:
        print("Error: not in", CWD)
        sys.exit(1)

    names = get_config_names()
    for name in names:
        conf = CONFIGS[name]
        # Backup
        if isinstance(conf, list):
            for loc in conf:
                backup(loc)
        else:
            backup(conf)
        # Stow
        subprocess.run(["stow", "-vR", name])
    # print("Done")


def unixpool_install():
    # Install tmux-sessionizer, bash, vim, tmux, i3
    subprocess.run(
        [
            "mkdir",
            "-p",
            fullpath(".local/bin"),
            fullpath(".config"),
            fullpath(".config/i3"),
            fullpath(".config/i3status"),
        ]
    )
    pairs = [
        (".dotfiles/bin/.local/bin/tmux-sessionizer", ".local/bin/tmux-sessionizer"),
        (
            ".dotfiles/bin/.local/bin/set-random-wallpaper",
            ".local/bin/set-random-wallpaper",
        ),
        (".dotfiles/bash/.bashrc", ".bashrc"),
        (".dotfiles/bash/.bash_profile", ".bash_profile"),
        (".dotfiles/vim/.vimrc", ".vimrc"),
        (".dotfiles/tmux/.tmux.conf", ".tmux.conf"),
        (".dotfiles/i3/.config/i3/config.alt", ".config/i3/config"),
        (".dotfiles/i3/.config/i3status/config.alt", ".config/i3status/config"),
    ]

    for pair in pairs:
        backup(pair[1])
        subprocess.run(
            [
                "ln",
                "-s",
                fullpath(pair[0]),
                fullpath(pair[1]),
            ]
        )
        print("Adding symlink to", pair[1])
    # print("Done")


if __name__ == "__main__":
    if MODE == "--unixpool":
        unixpool_install()
    else:
        install()
