#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
import sys
from pathlib import Path

CWD = os.path.join(Path.home(), ".dotfiles")
BACKUP_FOLDER = os.path.join(CWD, ".backup")

CONFIGS = {
    # dev
    "bin": "",
    "chtsh": "",
    "stylua": ".config/.stylua.toml",
    "luacheck": ".config/luacheck",

    # shell tools
    "bash": ".bashrc",
    # FIX: uninstall doesn't touch this since I use $ZDOTDIR
    "zsh": ".zshrc",
    "tmux": ".tmux.conf",
    "starship": ".config/starship",

    # wm
    "i3": ".config/i3",
    "awesome": ".config/awesome",
    "qtile": ".config/qtile",
    "hyprland": ".config/hypr",

    # bar
    "polybar": ".config/polybar",
    "waybar": ".config/waybar",

    # editor
    "vim": ".vimrc",

    # terminal
    "kitty": ".config/kitty",
    "alacritty": ".config/alacritty",
    "wezterm": ".config/wezterm",
    "ghostty": ".config/ghostty",

    # wm utils
    "xorg": ".xprofile",
    "rofi": ".config/rofi",
    "picom": ".config/picom",
    "dunst": ".config/dunst",

    # apps
    "lf": ".config/lf",
    "yazi": ".config/yazi",
    "ncspot": ".config/ncspot",
    "fastfetch": ".config/fastfetch",
    "flameshot": ".config/flameshot",
    "sxiv": ".config/sxiv",
    "zathura": ".config/zathura",
    "mime": {  # Multipurpose Internet Mail Extensions
        "mimeapps.list": ".config/mimeapps.list",
        "user-dirs.dirs": ".config/user-dirs.dirs",
        "user-dirs.locale": ".config/user-dirs.locale",
    },
}

NO_CONFIG_FOLDERS = [key for key, value in CONFIGS.items() if value == ""]


def exists(path: str) -> bool:
    """Check if a given path exists

    Args:
        path (str): path to a file or a folder

    Returns:
        True if the path exists
    """
    return os.path.isfile(path) or os.path.isdir(path)


def fullpath(location: str) -> str:
    """Add $HOME to the beginning of given path

    Args:
        location (str): path to file/folder

    Returns:
        Full path to file/folder
    """
    return os.path.join(Path.home(), location)


def backup(location: str) -> None:
    """Create a backup of an existing config

    Args:
        location (str): path to the config

    Returns:
        None
    """
    # filter empty strings
    if not location:
        return

    full_path = fullpath(location)
    if exists(full_path) and not os.path.islink(full_path):
        if DRY_RUN:
            print("DRY_RUN: Would backup", location)
            return

        if not os.path.isdir(BACKUP_FOLDER):
            os.mkdir(BACKUP_FOLDER)

        basename = os.path.basename(location)
        name, ext = basename, ""
        if os.path.isfile(full_path) and "." in basename:
            name, ext = basename.split(".")

        # if a backup already exist, add backup2
        count = len([el for el in os.listdir(BACKUP_FOLDER) if name in el])
        if count > 0:
            # turn settings.json into settings1.json and not settings.json1
            if ext:
                new_name = f"{name}{count + 1}.{ext}"
            else:
                new_name = f"{name}{count + 1}"
        else:
            new_name = basename

        backup_path = os.path.join(BACKUP_FOLDER, new_name)
        print("Found existing", location, "-> Moving it to", backup_path)
        shutil.move(full_path, backup_path)


def get_config_names(mode) -> list[str]:
    """Get the names of configs to install

    Returns:
        List of names
    """
    # Small installation
    if mode == "small":
        return ["bin", "bash", "chtsh", "tmux", "vim"]
    # Normal mode (good for wsl)
    if mode == "normal":
        return ["bin", "zsh", "starship", "chtsh", "tmux"]
    # Full installation (combine small and normal)
    if mode == "full":
        return ["bin", "bash", "chtsh", "tmux", "vim", "zsh", "starship"]
    # Linux installation
    if mode == "linux":
        return [
            "bin",
            "chtsh",
            "tmux",
            "zsh",
            "starship",
            "kitty",
            "rofi",
            "picom",
            # "lf",
            "yazi",
            "stylua",
            "xorg",
            "wezterm",
            "dunst",
            "qtile",
            "hyprland",
            "waybar",
        ]
    # Linux on my main machines
    if mode == "all":
        return list(CONFIGS.keys())
    # Remote server installation
    if mode == "server":
        return ["bin", "bash", "tmux", "vim"]

    print("Error:", mode, "argument doesn't exist")
    sys.exit(1)


def install_nvim(backup_and_replace=False, dev=False):
    location = os.path.expanduser("~/.config/nvim")
    if os.path.isdir(location):
        if not backup_and_replace:
            print("Nvim config already exists. Aborting...")
            return
        backup(".config/nvim")

    url = "https://github.com/trimclain/nvim"
    if dev:
        url = "git@github.com:trimclain/nvim"
    command = ["git", "clone", url, location]
    print("Installing my neovim config...")
    if not DRY_RUN:
        subprocess.run(command)


def install(mode):
    # Check if in ~/.dotfiles
    if os.getcwd() != CWD:
        # NOTE: --target=DIR could be used to specify the target directory
        print("Error: not in", CWD)
        sys.exit(1)

    names = get_config_names(mode)
    for name in names:
        conf = CONFIGS[name]
        # Backup
        if isinstance(conf, dict):
            for loc in conf.values():
                backup(loc)
        else:
            backup(conf)
        # Symlink
        command = ["stow", "--verbose", "--restow", name]
        if DRY_RUN:
            command.append("--simulate")
        subprocess.run(command)

    if mode == "all":
        install_nvim()
    elif mode not in ["small", "server"]:
        if os.getlogin() == "trimclain":
            install_nvim(backup_and_replace=True, dev=True)
        else:
            install_nvim(backup_and_replace=True)


##############################################################################
UNIXPAIRS = [
    (".dotfiles/bash/.bashrc", ".bashrc"),
    (".dotfiles/bash/.bash_profile", ".bash_profile"),
    (".dotfiles/vim/.vimrc", ".vimrc"),
    (".dotfiles/tmux/.tmux.conf", ".tmux.conf"),
    (".dotfiles/i3/.config/i3", ".config/i3"),
    (".dotfiles/i3/.config/i3status", ".config/i3status"),
]


def unixpool_install():
    # Install bash, vim, tmux, i3
    if not DRY_RUN:
        subprocess.run(
            [
                "mkdir",
                "-p",
                # fullpath(".local/bin"),
                fullpath(".config"),
                fullpath(".config/i3"),
                fullpath(".config/i3status"),
            ]
        )
    for pair in UNIXPAIRS:
        backup(pair[1])
        if not DRY_RUN:
            subprocess.run(
                [
                    "ln",
                    "-s",
                    fullpath(pair[0]),
                    fullpath(pair[1]),
                ]
            )
        print("Adding symlink to", pair[1])


def unixpool_uninstall():
    did_smth = False
    for pair in UNIXPAIRS:
        configpath = fullpath(pair[1])
        if os.path.islink(configpath):
            if not DRY_RUN:
                os.remove(configpath)
            print("Removing symlink to", pair[1])
            did_smth = True

    if not did_smth:
        print("There are no jobs")
##############################################################################


def uninstall(name: str, config: str, dir_to_unstow: str = "") -> bool:
    if config != "" and not os.path.islink(fullpath(config)):
        return False

    if not dir_to_unstow:
        dir_to_unstow = name
    command = ["stow", "--verbose", "--delete", dir_to_unstow]
    if DRY_RUN:
        command.append("--simulate")
    subprocess.run(command)
    return True


def uninstall_everything():
    did_smth = False
    for name, config in CONFIGS.items():
        if isinstance(config, dict):
            for n, c in config.items():
                if uninstall(n, c, name):
                    did_smth = True
                    # unstowing given dir_to_unstow removes all links in dict
                    break
        elif uninstall(name, config):
            did_smth = True

    if not did_smth:
        print("There are no jobs")


def main():
    parser = argparse.ArgumentParser(
        description="Dotfiles Manager",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    # fmt: off
    parser.add_argument("-d", "--dry-run", action="store_true", help="perform a dry run without making any changes")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--small", action="store_true", help=f"install {', '.join(get_config_names('small'))} configs")
    group.add_argument("--normal", action="store_true", help=f"install {', '.join(get_config_names('normal'))}, nvim configs")
    group.add_argument("--full", action="store_true", help=f"install {', '.join(get_config_names('full'))}, nvim configs")
    group.add_argument("--linux", action="store_true", help=f"install {', '.join(get_config_names('linux'))}, nvim configs")
    group.add_argument("--all", action="store_true", help=f"install {', '.join(get_config_names('all'))}, nvim configs")
    group.add_argument("--server", action="store_true", help=f"install {', '.join(get_config_names('server'))} configs")

    group.add_argument("--unixpool", action="store_true", help='manually symlink bash, vim, tmux, i3 configs')
    group.add_argument("--uuninstall", action="store_true", help='uninstall bash, vim, tmux, i3 configs')

    group.add_argument("--uninstall", action="store_true", help="uninstall all configs")
    args = parser.parse_args()
    # fmt: on

    if not args.unixpool and not args.uuninstall:
        if not shutil.which("stow"):
            print("Error: stow not found")
            sys.exit(1)

    global DRY_RUN
    DRY_RUN = args.dry_run

    if args.small:
        install("small")
    elif args.normal:
        install("normal")
    elif args.full:
        install("full")
    elif args.linux:
        install("linux")
    elif args.all:
        install("all")
    elif args.server:
        install("server")
    elif args.unixpool:
        unixpool_install()
    elif args.uuninstall:
        unixpool_uninstall()
    elif args.uninstall:
        uninstall_everything()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
