# vim:fileencoding=utf-8:foldmethod=marker

###############################################################################
##        ______ ___    __ __   ___    ____  __     __     __  __   __
##       /_  __//   \  / //  \ /   |  / __/ / /    /  |   / / /  \ / /
##        / /  /   _/ / // /\\/ /| | / /   / /    /   |  / / / /\\/ /
##       / /  / /\ \ / // / \/_/ | |/ /__ / /___ / _  | / / / / \/ /
##      /_/  /_/ \_\/_//_/       |_|\___//_____//_/ \_|/_/ /_/  /_/
##
##
##       Arthur McLain (trimclain)
##       mclain.it@gmail.com
##       https://github.com/trimclain
##
###############################################################################

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: +list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::
#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic


################################# Ligatures ###################################
# CascadiaCode (9/10)
# font_family       Cascadia Code Regular
# bold_font         Cascadia Code Bold
# italic_font       Cascadia Code Italic
# bold_italic_font  Cascadia Code Bold Italic

# font_family       Cascadia Code SemiLight
# bold_font         Cascadia Code SemiBold
# italic_font       Cascadia Code SemiLight Italic
# bold_italic_font  Cascadia Code SemiBold Italic

###############
font_family       Cascadia Code Light
bold_font         Cascadia Code SemiBold
italic_font       Cascadia Code Light Italic
bold_italic_font  Cascadia Code SemiBold Italic
###############

# font_features     CascadiaCode-SemiBoldItalic     calt zero +ss01
# font_features     CascadiaCode-LightItalic        calt zero +ss01
# font_features     CascadiaCode-ExtraLightItalic   calt zero +ss01
# font_features     CascadiaCode-Italic             calt zero +ss01
# font_features     CascadiaCode-BoldItalic         calt zero +ss01
# font_features     CascadiaCode-SemiLightItalic    calt zero +ss01

###############
font_features     CascadiaCode-Light              calt zero
font_features     CascadiaCode-LightItalic        calt zero
font_features     CascadiaCode-SemiBold           calt zero
font_features     CascadiaCode-SemiBoldItalic     calt zero
###############

# font_features     CascadiaCode-Regular            calt zero
# font_features     CascadiaCode-Bold               calt zero
# font_features     CascadiaCode-SemiLight          calt zero
# font_features     CascadiaCode-SemiBoldItalic     calt zero
# font_features     CascadiaCode-LightItalic        calt zero
# font_features     CascadiaCode-ExtraLightItalic   calt zero
# font_features     CascadiaCode-Italic             calt zero
# font_features     CascadiaCode-BoldItalic         calt zero
# font_features     CascadiaCode-SemiLightItalic    calt zero


# # JetBrains Mono (9/10)
# font_family      JetBrains Mono Regular Nerd Font Complete Mono
# bold_font        JetBrains Mono Bold Nerd Font Complete Mono
# italic_font      JetBrains Mono Italic Nerd Font Complete Mono
# bold_italic_font JetBrains Mono Bold Italic Nerd Font Complete Mono

############################## No Ligatures ###################################

# # Blex Mono (9/10)
# font_family      Blex Mono Nerd Font Complete Mono
# bold_font        Blex Mono Bold Nerd Font Complete Mono
# italic_font      Blex Mono Italic Nerd Font Complete Mono
# bold_italic_font Blex Mono Bold Italic Nerd Font Complete Mono

# # SF Mono (8/10)
# font_family      SF Mono Nerd Font Mono

# # ComicMono (sadly no italic) (8/10)
# font_family      ComicMono
# bold_font        ComicMono-Bold
# italic_font      ComicMono
# bold_italic_font ComicMono-Bold

# # FiraMono (8/10)
# font_family      FiraMono Nerd Font Mono Regular
# bold_font        FiraMono Nerd Font Mono Bold
# italic_font      FiraMono Nerd Font Mono Regular
# bold_italic_font FiraMono Nerd Font Mono Bold

# # Hack (7/10)
# font_family      Hack-Regular
# bold_font        Hack-Bold
# italic_font      Hack-Italic
# bold_italic_font Hack-BoldItalic

# # MesloLGS NF (7/10)
# font_family      MesloLGS NF Regular
# bold_font        MesloLGS NF Bold
# italic_font      MesloLGS NF Italic
# bold_italic_font MesloLGS NF Bold Italic

###############################################################################

font_size 13.0

#: Font size (in pts)

adjust_line_height  0
# adjust_line_height  105%
# adjust_line_height  125%
# adjust_line_height  175% # jess archer style
adjust_column_width 0

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).


disable_ligatures never

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them.  You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features setting.

# font_features

#: E.g. font_features none

#: Choose exactly which OpenType features to enable or disable. This
#: is useful as some fonts might have features worthwhile in a
#: terminal. For example, Fira Code Retina includes a discretionary
#: feature, zero, which in that font changes the appearance of the
#: zero (0), to make it more easily distinguishable from Ã˜. Fira Code
#: Retina also includes other discretionary features known as
#: Stylistic Sets which have the tags ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: Harfbuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, these are read from the FontConfig database first and
#: then this, setting is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use kitty +list-fonts
#: --psnames:

#: .. code-block:: sh

#:     $ kitty +list-fonts --psnames | grep Fira
#:     Fira Code
#:     Fira Code Bold (FiraCode-Bold)
#:     Fira Code Light (FiraCode-Light)
#:     Fira Code Medium (FiraCode-Medium)
#:     Fira Code Regular (FiraCode-Regular)
#:     Fira Code Retina (FiraCode-Retina)

#: The part in brackets is the PostScript name.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero::

#:     font_features FiraCode-Retina +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

#: Cursor customization {{{

cursor_text_color #111111

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background. Note that if cursor is set to none
#: then this setting is ignored.

cursor_shape block

#: The cursor shape can be one of (block, beam, underline). Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape. Applications running in the terminal
#: can override it. In particular,
#: https://sw.kovidgoyal.net/kitty/shell-integration/ in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.

cursor_blink_interval 0
# cursor_blink_interval -1

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Negative values mean use system default. Note
#: that numbers smaller than repaint_delay will be limited to
#: repaint_delay.

cursor_stop_blinking_after 15.0

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity.  Set to zero to never stop blinking.

#: }}}

#: Scrollback {{{

scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

scrollback_pager_history_size 0

#: Separate scrollback history size, used only for browsing the
#: scrollback buffer (in MB). This separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. The current
#: implementation stores the data in UTF-8, so approximatively 10000
#: lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.


#: }}}

#: Mouse {{{

mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

url_color #0087bd
url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed

open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler (open on macOS and xdg-open on Linux).

copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example::

#:     map shift+cmd+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

#: Mouse actions {{{

#: Mouse buttons can be remapped to perform arbitrary actions. The
#: syntax for doing so is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where ``button-name`` is one of ``left``, ``middle``, ``right`` or
#: ``b1 ... b8`` with added keyboard modifiers, for example:
#: ``ctrl+shift+left`` refers to holding the ctrl+shift keys while
#: clicking with the left mouse button. The number ``b1 ... b8`` can
#: be used to refer to upto eight buttons on a mouse.

#: ``event-type`` is one ``press``, ``release``, ``doublepress``,
#: ``triplepress``, ``click`` and ``doubleclick``.  ``modes``
#: indicates whether the action is performed when the mouse is grabbed
#: by the program running in the terminal, or not. It can have one or
#: more or the values, ``grabbed,ungrabbed``. ``grabbed`` refers to
#: when the program running in the terminal has requested mouse
#: events. Note that the click and double click events have a delay of
#: click_interval to disambiguate from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap an action map it to ``no-op``. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed no-op

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

clear_all_mouse_actions no

#: You can have kitty remove all mouse actions seen up to this point.
#: Useful, for instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell-integration to work.

#: Click the link under the mouse or move the cursor even when grabbed

mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Click the link under the mouse cursor

mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  Variant with ctrl+shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: Discard press event for link click

mouse_map ctrl+shift+left press grabbed discard_event

#::  Prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a URL.

#: Paste from the primary selection

mouse_map middle release ungrabbed paste_from_selection

#: Start selecting text

mouse_map left press ungrabbed mouse_selection normal

#: Start selecting text in a rectangle

mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: Select a word

mouse_map left doublepress ungrabbed mouse_selection word

#: Select a line

mouse_map left triplepress ungrabbed mouse_selection line

#::  Select the entire line

#: Select line from point

mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line

#: Extend the current selection

mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

mouse_map shift+middle release ungrabbed,grabbed paste_selection
mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#::  Select the entire line

#: Select line from point even when grabbed

mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line

#: Extend the current selection even when grabbed

mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires https://sw.kovidgoyal.net/kitty/shell-integration/ to
#::  work

#: }}}

#: }}}

#: Performance tuning {{{

# sync_to_monitor yes
sync_to_monitor no

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

#: }}}

#: Terminal bell {{{

# enable_audio_bell yes
enable_audio_bell no

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

visual_bell_duration 0.0

#: Visual bell duration. Flash the screen when a bell occurs for the
#: specified number of seconds. Set to zero to disable.

#: }}}

#: Window layout {{{

remember_window_size  yes
initial_window_width  640
initial_window_height 400

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

window_border_width 0.5pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified the unit is assumed to
#: be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: minimum needed borders for inactive windows are drawn. That is only
#: the borders that separate the inactive window from a neighbor. Note
#: that setting a non-zero window margin overrides this and causes all
#: borders to be drawn.

window_margin_width 0

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.

single_window_margin_width -1

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead. A single value sets all
#: four sides. Two values set the vertical and horizontal sides. Three
#: values set top, horizontal and bottom. Four values set top, right,
#: bottom and left.

window_padding_width 0.0
# window_padding_width 10.0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

hide_window_decorations yes
# hide_window_decorations no

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this setting when reloading config are undefined.

#: }}}

#: Color scheme {{{

# Import the color theme (comment all to use the default)
# include themes/ink.conf
# include themes/macchiato.conf
# include themes/material-palenight.conf
# include themes/vscode.conf
# include themes/rose-pine.conf

# tj's theme
# include themes/my-custom-theme.conf

# chris's theme
background #21262d

# Set background transparency
# background_opacity 0.85
background_opacity 1.0

#: The opacity of the background. A number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background. This is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  But it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  Instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. Or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  Be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  If you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost). Changing
#: this setting when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.

background_image none

#: Path to a background image. Must be in PNG format.

# dynamic_background_opacity yes
dynamic_background_opacity no

#: }}}

#: Advanced {{{

allow_remote_control no

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty. Reloading the config will not affect this
#: setting.

listen_on none

#: Tell kitty to listen to the specified unix/tcp socket for remote
#: control connections. Note that this will apply to all kitty
#: instances. It can be overridden by the kitty --listen-on command
#: line flag. This option accepts only UNIX sockets, such as
#: unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
#: variables are expanded. If {kitty_pid} is present then it is
#: replaced by the PID of the kitty process, otherwise the PID of the
#: kitty process is appended to the value, with a hyphen. This option
#: is ignored unless you also set allow_remote_control to enable
#: remote control. See the help for kitty --listen-on for more
#: details. Changing this option by reloading the config is not
#: supported.

update_check_interval 0
# update_check_interval 24

# THIS ALSO CHANGES HOW CURSOR LOOKS
shell_integration disabled
# shell_integration enabled

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells.  Set to
#: ``disabled`` to turn off shell integration, completely. See
#: https://sw.kovidgoyal.net/kitty/shell-integration/ for details.

term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

#: }}}

#: Keyboard shortcuts {{{

kitty_mod ctrl+shift

#: Clipboard {{{

#: Copy to clipboard

map kitty_mod+c copy_to_clipboard

#::  There is also a copy_or_interrupt action that can be optionally
#::  mapped to Ctrl+c. It will copy only if there is a selection and
#::  send an interrupt otherwise. Similarly,
#::  copy_and_clear_or_interrupt will copy and clear the selection or
#::  send an interrupt if there is no selection.

#: Paste from clipboard

map kitty_mod+v paste_from_clipboard

#: Paste from selection

map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection

#: Pass selection to program

map kitty_mod+o pass_selection_to_program

# Disable some keys coz I need them elsewhere
# map ctrl+shift+6 noop

#::  You can also pass the contents of the current selection to any
#::  program using pass_selection_to_program. By default, the system's
#::  open program is used, but you can specify your own, the selection
#::  will be passed as a command line argument to the program, for
#::  example::

#::      map kitty_mod+o pass_selection_to_program firefox

#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::

#::      map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

#: Scroll line up

map kitty_mod+up    scroll_line_up
map kitty_mod+k     scroll_line_up
map opt+cmd+page_up scroll_line_up
map cmd+up          scroll_line_up

#: Scroll line down

map kitty_mod+down    scroll_line_down
map kitty_mod+j       scroll_line_down
map opt+cmd+page_down scroll_line_down
map cmd+down          scroll_line_down

#: Scroll page up

map kitty_mod+page_up scroll_page_up
map cmd+page_up       scroll_page_up

#: Scroll page down

map kitty_mod+page_down scroll_page_down
map cmd+page_down       scroll_page_down

#: Scroll to top

map kitty_mod+home scroll_home
map cmd+home       scroll_home

#: Scroll to bottom

map kitty_mod+end scroll_end
map cmd+end       scroll_end

#: Scroll to previous shell prompt

map kitty_mod+z scroll_to_prompt -1

#::  Use a parameter of zero for scroll_to_prompt to scroll to the
#::  last jumped to or the last clicked position. Requires
#::  https://sw.kovidgoyal.net/kitty/shell-integration/ to work.

#: Scroll to next shell prompt

map kitty_mod+x scroll_to_prompt 1

#: Browse scrollback buffer in pager

map kitty_mod+h show_scrollback

#::  You can pipe the contents of the current screen + history buffer
#::  as STDIN to an arbitrary program using the ``launch`` function.
#::  For example, the following opens the scrollback buffer in less in
#::  an overlay window::

#::      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#::  For more details on piping screen and buffer contents to external
#::  programs, see launch.

#: Browse output of the last shell command in pager

map kitty_mod+g show_last_command_output

#::  You can also define additional shortcuts to get the command
#::  output. For example, to get the first command output on screen::

#::      map f1 show_first_command_output_on_screen

#::  To get the command output that was last accessed by a keyboard
#::  action or mouse action::

#::      map f1 show_last_visited_command_output

#::  You can pipe the output of the last command run in the shell
#::  using the launch function. For example, the following opens the
#::  output in less in an overlay window::

#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#::  To get the output of the first command on the screen, use
#::  @first_cmd_output_on_screen. To get the output of the last jumped
#::  to command, use @last_visited_cmd_output.

#::  Requires https://sw.kovidgoyal.net/kitty/shell-integration/ to
#::  work.

#: }}}

#: Tab management {{{

#: Next tab

map kitty_mod+right next_tab
map shift+cmd+]     next_tab
map ctrl+tab        next_tab

#: Previous tab

map kitty_mod+left previous_tab
map shift+cmd+[    previous_tab
map ctrl+shift+tab previous_tab

#: New tab

map kitty_mod+t new_tab
map cmd+t       new_tab

#: Close tab

map kitty_mod+q close_tab
map cmd+w       close_tab

#: Close OS window

map shift+cmd+w close_os_window

#: Move tab forward

map kitty_mod+. move_tab_forward

#: Move tab backward

map kitty_mod+, move_tab_backward

#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size

map kitty_mod+equal  change_font_size all +1.0
map kitty_mod+plus   change_font_size all +1.0
map kitty_mod+kp_add change_font_size all +1.0
map cmd+plus         change_font_size all +1.0
map cmd+equal        change_font_size all +1.0
map shift+cmd+equal  change_font_size all +1.0

#: Decrease font size

map kitty_mod+minus       change_font_size all -1.0
map kitty_mod+kp_subtract change_font_size all -1.0
map cmd+minus             change_font_size all -1.0
map shift+cmd+minus       change_font_size all -1.0

#: Reset font size

map kitty_mod+backspace change_font_size all 0
map cmd+0               change_font_size all 0


#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: }}}
