###############################################################################
# Basic vars
###############################################################################

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# TODO: unknown option in my older version, works fine on arch
# use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7;2m"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# enable icons
set icons

# show search results while typing
set incsearch

# automatically quit server when there are no clients left connected
set autoquit

###############################################################################
# Commands and Functions
###############################################################################

# TODO: update to use a different method
# Use kitty to display images, and fall back to pistol for everything else
set previewer ~/.config/lf/preview
# set cleaner ~/.config/lf/lf_kitty_clean

# TODO: add pdf previews

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# cmd open ${{
#     test -L $f && f=$(readlink -f $f)
#     case $(file --mime-type $f -b) in
#         text/*) $EDITOR $fx;;
#         *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
#     esac
# }}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# cmd extract ${{
#     set -f
#     case $f in
#         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
#         *.tar.gz|*.tgz) tar xzvf $f;;
#         *.tar.xz|*.txz) tar xJvf $f;;
#         *.zip) unzip $f;;
#         *.rar) unrar x $f;;
#         *.7z) 7z x $f;;
#     esac
# }}

# compress current file or selected files with tar and gunzip
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}

# compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}

###############################################################################
# Bindings
###############################################################################

############
# Defaults in case I forget:
# <Space> - toggle selection
# v - invert selection
# u - undo all selection                                        - vim
# y - copy                                                      - vim
map x delete
# d - cut                                                       - vim
# p - paste                                                     - vim
# c - clear copied or cut
# r - rename
# : - run builtin command                                       - vim
# $ - run shell command
# % - run shell command and pipe input/output into lf
# ! - run shell command and wait for a key press afterwards     - vim
# & - run shell command in background
# / - search forward                                            - vim
# ? - search back                                               - vim
# n - next search item                                          - vim
# N - previous search item                                      - vim
# z - toggle option or change it's value
# s - sort by
# e - launch an editor
# i - launch a pager (like what `less` uses)
# w - launch a shell
############

# unmap gh (it was set to "cd --")
map gh

# use enter for shell commands
# map <enter> shell
map <enter> open

# toggle hidden files and folders (<c-h> is same as backspace)
map <backspace> set hidden!

# execute current file (must be executable)
# map x $$f
# map X !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f
