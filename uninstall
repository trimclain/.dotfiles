#!/usr/bin/env python3

import os
import subprocess
from pathlib import Path
from shutil import which

STOW_FOLDERS = [
    "bin",  # 0
    "bash",  # 1
    "i3",  # 2
    "awesome",  # 3
    "polybar",  # 4
    "nvim",  # 5
    "chtsh",  # 6
    "tmux",  # 7
    "vim",  # 8
    "zsh",  # 9
    "kitty",  # 10
    "alacritty",  # 11
    "rofi",  # 12
    "picom",  # 13
    "lf",  # 14
    "stylua",  # 15
    "xorg",  # 16
    "wezterm",  # 17
    "apps",  # 18
    "dunst",  # 19
    "qtile"  # 20
]

STOW_CONFIGS = [
    "",  # 0
    ".bashrc",  # 1
    ".config/i3",  # 2
    ".config/awesome",  # 3
    ".config/polybar",  # 4
    ".config/nvim",  # 5
    "",  # 6
    ".tmux.conf",  # 7
    ".vimrc",  # 8
    ".zshrc",  # 9
    ".config/kitty",  # 10
    ".config/alacritty",  # 11
    ".config/rofi",  # 12
    ".config/picom",  # 13
    ".config/lf",  # 14
    ".config/.stylua.toml",  # 15
    ".xprofile",  # 16
    ".config/wezterm",  # 17
    ".config/mimeapps.list",  # 18
    ".config/dunst",  # 19
    ".config/qtile",  # 20
]

STOW_DICT = dict(zip(STOW_FOLDERS, STOW_CONFIGS))
NO_CONFIG_FOLDERS = [
    STOW_FOLDERS[i] for i in range(len(STOW_FOLDERS)) if not STOW_CONFIGS[i]
]


def is_tool(name):
    """Check whether `name` is in PATH and marked as executable."""
    return which(name) is not None


def main():
    did_smth = False
    for folder, config in STOW_DICT.items():
        configpath = os.path.join(Path.home(), config)
        # check if file/folder exists and is a symlink
        if os.path.islink(configpath):
            if is_tool("stow"):
                subprocess.run(["stow", "-vD", folder])
            else:
                subprocess.run(["rm", "-r", configpath])
                print("Removing symlink to", folder)
            did_smth = True
    # bin and chtsh (have to use stow)
    if is_tool("stow"):
        for folder in NO_CONFIG_FOLDERS:
            subprocess.run(["stow", "-vD", folder])
    if not did_smth:
        print("There are no jobs")


if __name__ == "__main__":
    main()
